/*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 *  ██████╗ ███████╗██╗     ███████╗████████╗███████╗
 *  ██╔══██╗██╔════╝██║     ██╔════╝╚══██╔══╝██╔════╝
 *  ██║  ██║█████╗  ██║     █████╗     ██║   █████╗  
 *  ██║  ██║██╔══╝  ██║     ██╔══╝     ██║   ██╔══╝  
 *  ██████╔╝███████╗███████╗███████╗   ██║   ███████╗
 *  ╚═════╝ ╚══════╝╚══════╝╚══════╝   ╚═╝   ╚══════╝
 * 
 * ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 * 【模块功能】
 * ┌─────────────────┬───────────────────────────────────────────────────────────┐
 * │ 对象删除         │ 实现对象删除的具体功能，管理资源释放                         │
 * ├─────────────────┼───────────────────────────────────────────────────────────┤
 * │ 请求处理         │ 处理被删除对象相关的请求，维护请求状态                       │
 * ├─────────────────┼───────────────────────────────────────────────────────────┤
 * │ 资源回收         │ 释放磁盘空间，更新分区状态                                  │
 * └─────────────────┴───────────────────────────────────────────────────────────┘
 * ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/

#include "constants.h"          // ⟪常量定义⟫
#include "ctrl_disk_obj_req.h"  // ⟪控制器、磁盘、对象、请求相关⟫
#include "debug.h"              // ⟪调试工具⟫

/*╔══════════════════════════════ 对象删除实现 ══════════════════════════════╗
 * ┌──────────────────────────────────────────────────────────────────────┐
 * │ 功能：删除指定的对象并释放相关资源                                      │
 * │ 参数：                                                                │
 * │ - obj_id: 要删除的对象ID                                              │
 * │ 返回：被中断的请求ID列表                                               │
 * └──────────────────────────────────────────────────────────────────────┘
 */
std::vector<int> Controller::delete_obj(int obj_id)
{
    // ◆ 释放磁盘资源
    for (auto &[disk_id, units] : OBJECTS[obj_id].replicas)
    {
        for (int cell_id : units)
        {
            DISKS[disk_id].free_cell(cell_id);
        }
    }

    // ◆ 处理相关请求
    std::vector<int> aborted_requests(OBJECTS[obj_id].req_ids.begin(), OBJECTS[obj_id].req_ids.end());
    for (int req_id : aborted_requests)
    {
        REQS[req_id % LEN_REQ].clear();
    }

    // ◆ 清理对象信息
    OBJECTS[obj_id].req_ids.clear();
    OBJECTS[obj_id].id = 0;
    OBJECTS[obj_id].replicas.clear();
    OBJECTS[obj_id].size = 0;
    OBJECTS[obj_id].tag = 0;

    return aborted_requests;
}

/*╔══════════════════════════════ 磁盘单元释放 ══════════════════════════════╗
 * ┌──────────────────────────────────────────────────────────────────────┐
 * │ 功能：释放磁盘单元格并更新分区状态                                      │
 * │ 参数：                                                               │
 * │ - cell_id: 要释放的单元格ID                                           │
 * └──────────────────────────────────────────────────────────────────────┘
 */
void Disk::free_cell(int cell_id)
{ 
    Part* part = cells[cell_id].part;

    // ◆ 更新空闲块链表（只更新非备份区的分区）
    if (part->tag != 0) {
        part->free_block(cell_id);
    }
    part->free_cells++;
    
    // ◆ 清理单元格信息
    cells[cell_id].free();
}